(()=>{const e=document.getElementById("projects"),t=document.getElementById("todayDate"),n=document.getElementById("openedProject"),o=document.getElementById("projectForm"),s=document.getElementById("newTaskInput"),i=document.getElementById("todos"),c=(document.getElementById("todo-management"),document.getElementById("close-todo-modal")),d=document.getElementById("overlay"),a=document.getElementById("todoModal"),l=document.getElementById("todoForm"),r=document.querySelector("#taskName"),m=document.querySelector("#dueDate"),u=document.querySelector("#info"),p=document.querySelector("#priority");let v,E,g=JSON.parse(localStorage.getItem("storage"))||[],f=!1;c.addEventListener("click",(()=>{h(a)})),t.innerText="Today's Date: "+(new Date).toString().slice(0,15);const y=(e,t,o)=>{v=e,n.innerText=e,x(i);const s=w(t,v);s.toDos.forEach((e=>function(e,t,n,o,s,i){const c=document.createElement("div");c.classList="container";const d=document.createElement("div");d.classList="infoCont",d.addEventListener("click",(()=>{alert(s)}));const l=document.createElement("div");l.classList="settings";const v=document.createElement("div");v.classList="todo Name",v.innerText=t;const g=document.createElement("h4");g.classList="todo dueDate",g.innerText=n;const y=document.createElement("h4");y.classList="todo priority",y.innerText=o,d.append(g,y,v);const h=document.createElement("button");h.innerText="Edit",h.addEventListener("click",(()=>{((e,t,n,o,s)=>{L(e),f=!0,E=t,r.value=t,m.value=n,u.value=o,p.value=s})(a,t,n,s,o)})),l.appendChild(h),T(l,c,t,i.toDos),c.append(d,l),e.append(c)}(i,e.name,e.dueDate,e.priority,e.description,s))),(()=>{const e=document.createElement("button");e.innerText="+ Add new item",e.id="newTodoBtn",e.addEventListener("click",(()=>{L(a)})),i.append(e)})()},L=e=>{null!==e&&(e.classList.add("active"),d.classList.add("active"))},h=e=>{null!==e&&(l.reset(),e.classList.remove("active"),d.classList.remove("active"))},I=(e,t)=>{const n=e.findIndex((e=>e.name===t));if(n<0)return console.log("Problem - this is project does not exist in list");e.splice(n,1)},x=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)},T=function(e,t,o,s){const c=document.createElement("button");c.classList="setting del",c.innerText="Del",c.addEventListener("click",(()=>{if(I(s,o),t.remove(),v===o){for(;i.firstChild;)i.removeChild(i.firstChild);n.innerText="Click on project to see task"}})),e.append(c)},D=(e,t)=>{const n=document.createElement("div");n.classList="container";const o=document.createElement("div");o.classList="settings";const i=document.createElement("div");i.classList="itemName",i.innerText=t,i.addEventListener("click",(()=>{y(t,g)})),s.value="",T(o,n,t,g),n.append(i,o),e.append(n)},k=t=>{if(g.some((e=>e.name===t)))return void console.log("this project name already exists. Please choose new name");const n=function(e){const t=[];return{name:e,addTodo:e=>{t.push(e)},removeTodo:function(e){const n=t.findIndex((t=>t.name===e));n<0&&console.log("Problem - this is project does not exist in todo list"),t.splice(n,1)},toDos:t}}(t);g.push(n),localStorage.setItem("storage",JSON.stringify(g)),x(e),g.forEach((t=>D(e,t.name)))},w=(e,t)=>{const n=e.findIndex((e=>e.name===t));return n<0?console.log("Problem - this is project does not exist in"):e[n]},B=(e,t,n,o,s,i)=>{const c={name:e,dueDate:t,priority:o,description:n};((e,t)=>{if(e.findIndex((e=>e.name===t.name))>-1)return console.log("Problem - this is task name already exist. please try again");e.push(t)})(w(s,i).toDos,c),localStorage.setItem("storage",JSON.stringify(s)),y(i,s),h(a)};o.addEventListener("submit",(function(e){e.preventDefault(),k(s.value)})),l.addEventListener("submit",(function(e){e.preventDefault(),f&&I(w(g,v).toDos,E);const t=p.options[p.selectedIndex];B(r.value,m.value,u.value,t.value,g,v),f=!1})),g?(g.forEach((t=>D(e,t.name))),v=g[0]):e.innerText="No Projects Yet",k("clean House"),B("Dishes","2022-01-01","Mister will do it","High",g,g[0].name),B("kaka","2022-02-01","Mister will NOT do it","Low",g,g[0].name),k("Paint"),B("cracks","2022-09-01","I will do it","High",g,g[1].name),B("side wall","2022-03-01","I will DEFINITELY do it","Low",g,g[1].name)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,